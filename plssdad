import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.util.Timer;

import javax.swing.JOptionPane;

import info.gridworld.grid.BoundedGrid;
import info.gridworld.grid.Location;

import info.gridworld.world.World;


public class MineSweeperWorld extends World<Object>{
	int[][] mineWorld;
	int rows;
	int col;
	int clickCount = 0;
	int time=0;
	int mine;
	public MineSweeperWorld(int r, int c, int mine){
		super(new BoundedGrid<Object>(r,c));
		mineWorld = new int[r][c];
		rows = r;
		col= c;
		this.mine=mine;
		this.show();
		placeMines(mine);
		appear();
		putNum();
		contain();
		setMessage("Welcome to MineSweeper! To begin click anywhere.");
	
	}

	
	private void contain() {
		// TODO Auto-generated method stub
		for(int q = 0;q<rows;q++){
			for(int q2 = 0; q2<col;q2++){
				Location loc = new Location(q,q2);
				this.add(loc, new Display(this.getGrid().get(loc)));
				
			}
		}
	}

	void reset(){
		for(int i = 0; i<rows;i++){
			for(int i2 = 0 ;i2<col;i2++){
				this.getGrid().remove(new Location(i,i2));
				
			}
		}
		mineWorld = new int[rows][col];
		this.show();
		placeMines(mine);
		appear();
		putNum();
		contain();
		setMessage("Welcome to MineSweeper! To begin click anywhere.");
	
	}
	
	private void putNum() {
	for(int q = 0;q<rows;q++){
		for(int q2 = 0; q2<col;q2++){
				int num = 0;
				Location loc = new Location(q,q2);
				if(!(this.getGrid().get(loc)instanceof Mine)){
				this.remove(loc);
				for(Location x:this.getGrid().getOccupiedAdjacentLocations(loc)){
					if(this.getGrid().get(x)instanceof Mine){
						num++;
				    }
				}
				this.add(loc, num);
				mineWorld[q][q2]=num;
				}
				if(this.getGrid().get(loc).equals(0))
					this.remove(loc);
		}
	}
	}
	

	
	private boolean gameCheck() {
		// TODO Auto-generated method stub
		int mineCounter=0;
		int displayCount=0;
		for(int i = 0; i<rows;i++){
			for(int i2 = 0 ;i2<col;i2++){
				if(this.getGrid().get(new Location(i,i2))instanceof Display){
						displayCount++;
				}
				
			}
		}
		for(int i = 0; i<rows;i++){
			for(int i2 = 0 ;i2<col;i2++){
				if(this.getGrid().get(new Location(i,i2))instanceof Flag && mineWorld[i][i2]=='b'){
						mineCounter++;
				}
				
			}
		}
		if(mineCounter == this.mine && displayCount ==0){
			JOptionPane.showMessageDialog(null, "A winner is you!");
			reset();
			return true;
		}else{
		return false;
		}
	}

	@Override
	public boolean locationClicked(Location loc, int btn){
		
		if(btn==3){
			rightClick(loc);
			for(int q = 0;q<rows;q++){
				for(int q2 = 0; q2<col;q2++){
					System.out.print(mineWorld[q][q2]+"\t");
				}
				System.out.println();
			}
			
		}
		else{
			leftClick(loc);
			for(int q = 0;q<rows;q++){
				for(int q2 = 0; q2<col;q2++){
					System.out.print(mineWorld[q][q2]+"\t");
				}
				System.out.println();
				}
		}
		gameCheck();
		return true;
	}
	
	private void leftClick(Location loc) {
		if(this.getGrid().get(loc)instanceof Display){
		int row1=loc.getRow(); int col1 =loc.getCol();
		if(mineWorld[row1][col1]=='b'){
			boom();
		}
		else if(mineWorld[row1][col1]==0){
			this.remove(loc);
			mineWorld[row1][col1]=-1;
			for(Location x: this.getGrid().getValidAdjacentLocations(loc))
			leftClick(x);
		}
		else if(mineWorld[row1][col1]>0){
			this.add(loc, mineWorld[row1][col1]);
		}
	 }
		
	}

	private void boom() {
		// TODO Auto-generated method stub
		for(int q = 0;q<rows;q++){
			for(int q2 = 0; q2<col;q2++){
				Location loc = new Location(q,q2);
				this.add(loc, new Explode());
				
			}
		}
		JOptionPane.showMessageDialog(null,"You lose");
		reset();
	}

	private void rightClick(Location loc) {
		// TODO Auto-generated method stub
		
		if(this.getGrid().get(loc)instanceof Display){
			this.remove(loc);
			this.add(loc, new Flag(mineWorld[loc.getRow()][loc.getCol()]));
		}else if(this.getGrid().get(loc)instanceof Quest){
			Quest temp = (Quest) this.getGrid().get(loc);
			this.remove(loc);
			this.add(loc, new Display(temp.retObj()));
		}else if(this.getGrid().get(loc)instanceof Flag){
			Flag temp = (Flag) this.getGrid().get(loc);
			this.remove(loc);
			this.add(loc, new Quest(temp.retObj()));
		}
		
	}

	private void appear(){
		for(int q = 0;q<rows;q++){
			for(int q2 = 0; q2<col;q2++){
				
				Location loc = new Location(q,q2);
				if(mineWorld[q][q2]=='b'){
					this.add(loc, new Mine());
				}
					
			}
		}
	}
	
	
	
	private void placeMines( int mine) {
		// TODO Auto-generated method stub
		for(int i = 0; i<mine+1;i++)
		mineWorld[(int) (Math.random()*rows)][(int) (Math.random()*col)] = 'b';
			
	}
	
	
}
